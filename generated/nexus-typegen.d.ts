/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../src/types/Context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  coalDepotInput: { // input type
    address: string; // String!
    coalDepotName: string; // String!
    coalDescAndAmount: string; // String!
    coordinates: NexusGenInputs['coordinateInput']; // coordinateInput!
    image: string; // String!
    landline: string; // String!
    mobilePhone: string; // String!
  }
  coordinateInput: { // input type
    latitude: number; // Float!
    longitude: number; // Float!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  coalDepot: { // root type
    coalDepotName: string; // String!
    coalDescAndAmount: string; // String!
    id: string; // ID!
    image: string; // String!
    landline: string; // String!
    latitude: number; // Float!
    longitude: number; // Float!
    mobilePhone: string; // String!
    userId?: string | null; // String
  }
  imageSignature: { // root type
    signature: string; // String!
    timestamp: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createCoalDepot: NexusGenRootTypes['coalDepot'] | null; // coalDepot
    createImageSignature: NexusGenRootTypes['imageSignature']; // imageSignature!
  }
  Query: { // field return type
    ok: boolean; // Boolean!
  }
  coalDepot: { // field return type
    coalDepotName: string; // String!
    coalDescAndAmount: string; // String!
    id: string; // ID!
    image: string; // String!
    landline: string; // String!
    latitude: number; // Float!
    longitude: number; // Float!
    mobilePhone: string; // String!
    publicId: string; // String!
    userId: string | null; // String
  }
  imageSignature: { // field return type
    signature: string; // String!
    timestamp: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createCoalDepot: 'coalDepot'
    createImageSignature: 'imageSignature'
  }
  Query: { // field return type name
    ok: 'Boolean'
  }
  coalDepot: { // field return type name
    coalDepotName: 'String'
    coalDescAndAmount: 'String'
    id: 'ID'
    image: 'String'
    landline: 'String'
    latitude: 'Float'
    longitude: 'Float'
    mobilePhone: 'String'
    publicId: 'String'
    userId: 'String'
  }
  imageSignature: { // field return type name
    signature: 'String'
    timestamp: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCoalDepot: { // args
      input?: NexusGenInputs['coalDepotInput'] | null; // coalDepotInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}